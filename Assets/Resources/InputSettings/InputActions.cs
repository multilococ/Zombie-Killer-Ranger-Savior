//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Resources/InputSettings/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""WeaponСontrol"",
            ""id"": ""95a71571-9bce-4c2e-afa9-dfe9361805d4"",
            ""actions"": [
                {
                    ""name"": ""Aiming"",
                    ""type"": ""Value"",
                    ""id"": ""3d150169-4a62-4054-ac0a-3ef33904c0cd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""f42341bc-1e4e-4bd6-bbcb-2326eadb3661"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c4b95593-d4f5-483d-bc29-383e2971795c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40db5e2e-614c-4c9c-bdb3-7ea9def662fd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": []
        },
        {
            ""name"": ""Phone"",
            ""bindingGroup"": ""Phone"",
            ""devices"": []
        }
    ]
}");
        // WeaponСontrol
        m_WeaponСontrol = asset.FindActionMap("WeaponСontrol", throwIfNotFound: true);
        m_WeaponСontrol_Aiming = m_WeaponСontrol.FindAction("Aiming", throwIfNotFound: true);
        m_WeaponСontrol_Shoot = m_WeaponСontrol.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // WeaponСontrol
    private readonly InputActionMap m_WeaponСontrol;
    private List<IWeaponСontrolActions> m_WeaponСontrolActionsCallbackInterfaces = new List<IWeaponСontrolActions>();
    private readonly InputAction m_WeaponСontrol_Aiming;
    private readonly InputAction m_WeaponСontrol_Shoot;
    public struct WeaponСontrolActions
    {
        private @InputActions m_Wrapper;
        public WeaponСontrolActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Aiming => m_Wrapper.m_WeaponСontrol_Aiming;
        public InputAction @Shoot => m_Wrapper.m_WeaponСontrol_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_WeaponСontrol; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponСontrolActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponСontrolActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponСontrolActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponСontrolActionsCallbackInterfaces.Add(instance);
            @Aiming.started += instance.OnAiming;
            @Aiming.performed += instance.OnAiming;
            @Aiming.canceled += instance.OnAiming;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IWeaponСontrolActions instance)
        {
            @Aiming.started -= instance.OnAiming;
            @Aiming.performed -= instance.OnAiming;
            @Aiming.canceled -= instance.OnAiming;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IWeaponСontrolActions instance)
        {
            if (m_Wrapper.m_WeaponСontrolActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponСontrolActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponСontrolActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponСontrolActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponСontrolActions @WeaponСontrol => new WeaponСontrolActions(this);
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    private int m_PhoneSchemeIndex = -1;
    public InputControlScheme PhoneScheme
    {
        get
        {
            if (m_PhoneSchemeIndex == -1) m_PhoneSchemeIndex = asset.FindControlSchemeIndex("Phone");
            return asset.controlSchemes[m_PhoneSchemeIndex];
        }
    }
    public interface IWeaponСontrolActions
    {
        void OnAiming(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
